(boolean 0)
(boolean nil)
(boolean [])
(boolean "")
(isEmpty? [])
(get [] 0)
(get [nil] 0)
(nil? nil)
(empty? [])
(defn boolean [arg]
(use 'i-am-a-horse-in-the-land-of-booleans)
(boolean false)
(boolean nil)
(boolean "")
(use 'i-am-a-horse-in-the-land-of-booleans)
(boolean "")
(boolean false)
(boolean nil)
(use 'i-am-a-horse-in-the-land-of-booleans)
(teen? 13)
(teen 12
)
(teen? 20)
(teen? 400)
(use 'i-am-a-horse-in-the-land-of-booleans)
(teen? 20)
(use 'i-am-a-horse-in-the-land-of-booleans)
(teen? 20)
(teen? 12)
(teen? 13
)
(teen? 19)
(use 'i-am-a-horse-in-the-land-of-booleans)
fg
(use 'i-am-a-horse-in-the-land-of-booleans)
(abs 10)
(abs -3)
(use 'i-am-a-horse-in-the-land-of-booleans)
(abs -3)
fg
(abs -3)
fg
(use 'i-am-a-horse-in-the-land-of-booleans)
(abs -3)
(abs 3)
(* -1 -3)
(abs -3)
(use 'i-am-a-horse-in-the-land-of-booleans)
(abs -3)
(abs 3)
((fn [x] (if (>= x 0) x -x))-3)
((fn [x] (if (>= x 0) x (* -1 x))-3)
((fn [x] (if (>= x 0) x (* -1 x)))-3)
((fn [x] (if (>= x 0) x (* x -1)))-3)
(use 'i-am-a-horse-in-the-land-of-booleans)
(abs -1)
(use 'i-am-a-horse-in-the-land-of-booleans)
(abs -1)
(abs 0)
(abs 4)
(abs -12.3)
(use 'i-am-a-horse-in-the-land-of-booleans)
(divides 2 4)
divides
(divides? 2 4)
(use 'i-am-a-horse-in-the-land-of-booleans)
(divides? 2 4)
(divides? 4 2)
(mod 4 2)
(mod 2 4)
((fn [divisor n] if (= 0 (mod n divisor)) true false) 2 4)
((fn [divisor n] (if (= 0 (mod n divisor))) true false) 2 4)
((fn [divisor n] (if (= 0 (mod n divisor)) true false) 2 4)
)
((fn [divisor n] (if (= 0 (mod n divisor)) true false) 2 4))
((fn [divisor n] (if (= 0 (mod n divisor)) true false))2 4)
((fn [divisor n] (if (= 0 (mod n divisor)) true false))4 4)
((fn [divisor n] (if (= 0 (mod n divisor)) true false))4 2)
(use 'i-am-a-horse-in-the-land-of-booleans)
(divides? 2 4)
(use 'i-am-a-horse-in-the-land-of-booleans)
(divides? 2 4)
(divides? 4 2)
(use 'i-am-a-horse-in-the-land-of-booleans)
fizzbuzz
(fizzbuzz 3)
(fizzbuzz 5)
(fizzbuzz 15)
(use 'i-am-a-horse-in-the-land-of-booleans)
(fizzbuzz 15)
(fizzbuzz 3)
(fizzbuzz 5)
(fizzbuzz 1)
(use 'i-am-a-horse-in-the-land-of-booleans)
(fizzbuzz 2)
(fizzbuzz 45)
(fizzbuzz 48)
(fizzbuzz 70)
(use 'i-am-a-horse-in-the-land-of-booleans)
(generic-doublificate 1)
(generic-doublificate [])
(generic-doublificate [1 2 3])
(generic-doublificate '(1 2 3))
(generic-doublificate 1)
(generic-doublificate [1 2])
(generic-doublificate '(65 21))
(generic-doublificate {})
(generic-doublificate [])
(generic-doublificate {:a 1})
(use 'i-am-a-horse-in-the-land-of-booleans)
(not-teen? 10)
(not-teen? 13)
(not-teen? 19)
(not-teen? 190)
(use 'i-am-a-horse-in-the-land-of-booleans)
(leap-year? 4)
leap-year?
(use 'i-am-a-horse-in-the-land-of-booleans)
(leap-year? 4)
(leap-year? 400)
(leap-year? 100)
(leap-year? 200)
(leap-year? 400)
(leap-year? 12)
(leap-year? 20)
(leap-year? 15)
(generic-doublificate 2)
(defn generic-doublificate [x]
  (cond (number? x) true
        (empty? x) nil
        (or (list? x) (vector? x)) (* 2 (count x))
   :else true))
(generic-doublificate 2)
(generic-doublificate 1)
(generic-doublificate [1 2])
(generic-doublificate '(65 21))
(generic-doublificate {})
(generic-doublificate [])
(generic-doublificate {:a 1})
